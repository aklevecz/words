{"version":3,"sources":["Context.js","D3.js","styles.js","App.js","serviceWorker.js","index.js"],"names":["server","WordContext","React","createContext","getWords","a","fetch","response","json","data","socket","io","path","transport","voteReducer","state","action","type","word","color","text_color","vote","publisher","newState","wordReducer","words","WordProvider","children","useReducer","wordz","dispatchWord","votez","dispatchVote","useEffect","on","isNew","then","votes","allWords","map","w","close","Provider","value","D3","Object","keys","length","x","d3","domain","range","nodes","d","name","radius","id","replace","simulation","force","strength","width","height","c","attr","y","t","this","textContent","call","subject","find","active","alphaTarget","restart","fx","fy","n","selectAll","enter","append","style","emit","chroma","hex","text","dis","Math","min","getComputedTextLength","getFontSize","remove","Colors","Raptor","styled","div","Container","props","IContainer","BContainer","LogContainer","CatButton","App","useContext","useState","setColor","setWord","localStorage","getItem","raptor","setRaptor","raptorRef","useRef","console","log","onClick","e","placeholder","onChange","target","preventDefault","document","getElementById","key","textAlign","border","ref","background","margin","setItem","current","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.113e6881.chunk.js","sourcesContent":["import React, { useEffect, useReducer } from \"react\";\r\nimport io from \"socket.io-client\";\r\n\r\nexport const WordContext = React.createContext();\r\n\r\nlet server = \"http://localhost:4400\";\r\nserver = \"https://eng.med--lab.org\";\r\nconst getWords = async () => {\r\n  const response = await fetch(`${server}/words/`);\r\n  const data = await response.json();\r\n  return data;\r\n};\r\n\r\n// const socket = io(server);\r\nconst socket = io(server, { path: \"/socket.io\", transport: [\"websocket\"] });\r\n\r\nconst voteReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"INCREMENT\":\r\n      const {\r\n        word: { color, text_color, word, vote, publisher }\r\n      } = action;\r\n      return { ...state, [word]: { vote, color, text_color, publisher } };\r\n    case \"init\":\r\n      return action.newState;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst wordReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"init\":\r\n      return action.words;\r\n    case \"ADD_WORD\":\r\n      return [...state, action.word.word];\r\n  }\r\n};\r\n\r\nconst WordProvider = ({ children }) => {\r\n  const [wordz, dispatchWord] = useReducer(wordReducer, []);\r\n  const [votez, dispatchVote] = useReducer(voteReducer, {});\r\n\r\n  useEffect(() => {\r\n    socket.on(\"updateword\", word => {\r\n      if (word.isNew) dispatchWord({ type: \"ADD_WORD\", word });\r\n      dispatchVote({ type: \"INCREMENT\", word });\r\n    });\r\n\r\n    getWords().then(words => {\r\n      const votes = {};\r\n      const allWords = words.map(w => {\r\n        votes[w.word] = {\r\n          vote: w.vote,\r\n          color: w.color,\r\n          text_color: w.text_color,\r\n          publisher: w.publisher\r\n        };\r\n        return w.word;\r\n      });\r\n      dispatchWord({ type: \"init\", words: allWords });\r\n      dispatchVote({ type: \"init\", newState: votes });\r\n    });\r\n    return () => socket.close();\r\n  }, []);\r\n  return (\r\n    <WordContext.Provider value={{ wordz, socket, votez }}>\r\n      {children}\r\n    </WordContext.Provider>\r\n  );\r\n};\r\n\r\nexport default WordProvider;\r\n","import React, { useEffect } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport * as chroma from \"chroma-js\"\r\n\r\n\r\nfunction getFontSize(d, dis) {\r\nreturn Math.min(2 * d.radius, (2 * d.radius - 8) / dis.getComputedTextLength() * 15) + \"px\"; \r\n}\r\n\r\nconst D3 = ({ data, socket }) => {\r\n  useEffect(() => {\r\n    if (Object.keys(data).length === 0) return;\r\n    var width = 400,\r\n      height = 400;\r\n\r\n    var x = d3\r\n      .scaleLinear()\r\n      .domain([0, 20])\r\n      .range([30, 55]);\r\n    var nodes = Object.keys(data).map(d => {\r\n      return {text_color: data[d].text_color, color:data[d].color, name: d, radius: x(data[d].vote), id:d.replace(' ', '_') };\r\n    });\r\n\r\n    var simulation = d3\r\n      .forceSimulation(nodes)\r\n      .force(\"charge\", d3.forceManyBody().strength(100))\r\n      .force(\"center\", d3.forceCenter(width / 2, height / 2))\r\n      .force(\r\n        \"collision\",\r\n        d3.forceCollide().radius(function(d) {\r\n          return d.radius;\r\n        })\r\n      )\r\n      .on(\"tick\", ticked);\r\n    function dragsubject() {\r\n      return simulation.find(d3.event.x, d3.event.y);\r\n    }\r\n    d3.select(\"svg\").call(\r\n      d3\r\n        .drag()\r\n        .subject(dragsubject)\r\n        .on(\"start\", dragstarted)\r\n        .on(\"drag\", dragged)\r\n        .on(\"end\", dragended)\r\n    );\r\n    var u = d3\r\n      .select(\"svg\")\r\n      .selectAll(\"circle\")\r\n      .data(nodes);\r\n\r\n    var n = u.enter();\r\n    var c = n.append(\"circle\")\r\n     .attr('id', d => d.id+'c')\r\n     .attr('fill', d => d.color)\r\n     .style('stroke', 'white')\r\n     .style('stroke-width', '5px')\r\n    .attr(\"r\", function(d) {\r\n      return d.radius;\r\n    })\r\n    .on('click', (d) => {\r\n      socket.emit('colorword', {word: d.name, color: chroma.random().hex(), type:\"circ\"})\r\n      // const c = d3.select(`#${d.id}c`)\r\n\r\n      // console.log(c)\r\n      // c.attr('fill', chroma.random())\r\n    });\r\n\r\n    var t = n\r\n      .append(\"text\")\r\n      .attr('id', d => d.id+'t')\r\n      .attr(\"text-anchor\", \"middle\")\r\n      // .style(\"font-size\", d => d.radius/4)\r\n      .style(\"fill\", d => d.text_color)\r\n      // .style('stroke', 'white')\r\n      .style('font-weight', 'bolder')\r\n      .text(d => d.name)\r\n        .style(\"font-size\", function(d) {return getFontSize(d, this)})\r\n      .style('stroke-width', d => d.radius/100)\r\n\r\n      .on('click', (d) => {\r\n              socket.emit('colorword', {word: d.name, color: chroma.random().hex(), type:\"text\"})\r\n        // const t = d3.select(`#${d.id}t`)\r\n        // t.style('stroke', chroma.random())\r\n        // t.style('fill', chroma.random())\r\n      });\r\n\r\n    function ticked() {\r\n      c.attr(\"cx\", function(d) {\r\n        return d.x;\r\n      }).attr(\"cy\", function(d) {\r\n        return d.y;\r\n      });\r\n\r\n      t.attr(\"x\", d => d.x)\r\n      .attr(\"y\", function(d){\r\n        const divisor = d.y + d.radius /5 - this.textContent.length / 7\r\n        return divisor\r\n      });\r\n    }\r\n\r\n    function dragstarted() {\r\n      if (!d3.event.active) simulation.alphaTarget(0.3).restart();\r\n      d3.event.subject.fx = d3.event.subject.x;\r\n      d3.event.subject.fy = d3.event.subject.y;\r\n    }\r\n\r\n    function dragged() {\r\n      d3.event.subject.fx = d3.event.x;\r\n      d3.event.subject.fy = d3.event.y;\r\n    }\r\n\r\n    function dragended() {\r\n      if (!d3.event.active) simulation.alphaTarget(0);\r\n      d3.event.subject.fx = null;\r\n      d3.event.subject.fy = null;\r\n    }\r\n\r\n    return () => {\r\n      d3.select(\"svg\")\r\n        .selectAll(\"*\")\r\n        .remove();\r\n    };\r\n  }, [data]);\r\n  return <svg width=\"400\" height=\"400\" />;\r\n};\r\n\r\nexport default D3;\r\n","import styled from \"styled-components\"\r\n\r\nconst Colors = {\r\n  mood: \"#e159e1\",\r\n  object: \"#53e553\",\r\n  sensibility: \"#ffff82\"\r\n};\r\n\r\nconst Raptor = styled.div`\r\ntext-align: center;\r\nfont-size:3rem;\r\n`\r\n\r\nconst Container = styled.div`\r\n  background: ${props => props.color};\r\n  height: 100%;\r\n  color:white;\r\n`;\r\n\r\nconst CatContainer = styled.div`\r\n  display: grid;\r\n  grid-auto-flow: column;\r\n  text-align: center;\r\n  padding: 0 3rem;\r\n`;\r\n\r\nconst IContainer = styled.div`\r\ntext-align: center;\r\ninput {\r\n    height: 30px;\r\n    width: 240px;\r\n    border-radius: 20px;\r\n    text-align: center;\r\n    font-size: 1rem;\r\n}\r\n`\r\nconst BContainer = styled.div`\r\ntext-align:center;\r\nbutton {\r\n    width: 130px;\r\n    height: 30px;\r\n    border-radius: 0px 0px 30px 30px;\r\n    font-weight: bolder;\r\n    font-size: 1.1rem;\r\n    color:black;\r\n}\r\n`\r\nconst LogContainer = styled.div`\r\n    margin: 2rem 3rem;\r\n    font-family: monospace;\r\n`\r\nconst CatButton = styled.div`\r\n  padding: 1rem;\r\n`;\r\nconst MoodS = styled(CatButton)`\r\n  background: ${Colors.mood};\r\n`;\r\n\r\nconst ObjectS = styled(CatButton)`\r\n  background: ${Colors.object};\r\n`;\r\nconst SenseS = styled(CatButton)`\r\n  background: ${Colors.sensibility};\r\n`;\r\n\r\nexport {Raptor, Container, CatContainer, CatButton, IContainer, BContainer, LogContainer, MoodS, ObjectS, SenseS}","import React, { useContext, useRef, useState } from \"react\";\r\nimport { WordContext } from \"./Context\";\r\nimport D3 from \"./D3\";\r\nimport * as chroma from \"chroma-js\"\r\n\r\nimport {IContainer, Container, Raptor, BContainer, LogContainer} from \"./styles\"\r\n\r\nfunction App() {\r\n  const { wordz, socket, votez } = useContext(WordContext);\r\n  const [color, setColor] = useState(\"mood\");\r\n  const [word, setWord] = useState(\"\");\r\n  const [raptor, setRaptor] = useState(localStorage.getItem('raptor'));\r\n  const raptorRef = useRef();\r\n\r\n  const addWord = e => {\r\n    e.preventDefault();\r\n    if (word.length === 0) return\r\n    document.getElementById('add-word').value=''\r\n    socket.emit(\"addword\", { word, raptor, color: chroma.random().hex(), text_color: chroma.random().hex() });\r\n  };\r\n\r\n  const handleWord = e => {\r\n    setWord(e.target.value);\r\n  };\r\n\r\n  const voteWord = w => {\r\n    socket.emit(\"voteword\", w);\r\n  };\r\n\r\n  const changeColor = e => {\r\n    setColor(chroma.random())\r\n    return\r\n    setColor(e.target.innerHTML);\r\n  };\r\n\r\n  const raptorLogin = () => {\r\n    localStorage.setItem('raptor', raptorRef.current.value)\r\n    setRaptor(raptorRef.current.value)\r\n  }\r\n\r\n  if (!raptor) {\r\n    return (\r\n      <div>\r\n        <form><div style={{textAlign:'center'}}>\r\n        <h1 style={{textAlign:'center'}}>who are you</h1>\r\n        <input style={{border:'2px black solid'}} ref={raptorRef}></input>\r\n       <div><button style={{background:'yellow', margin:'1rem'}} onClick={raptorLogin}>\r\n          corntinue🌽\r\n        </button></div> </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n  console.log(votez)\r\n  return (\r\n    <Container onClick={changeColor} color={\"black\"}>\r\n      <Raptor>hi {raptor}</Raptor>\r\n      <D3 socket={socket} data={votez} />\r\n      {/* <CatContainer>\r\n        <MoodS onClick={changeColor}>mood</MoodS>\r\n        <ObjectS onClick={changeColor}>object</ObjectS>\r\n        <SenseS onClick={changeColor}>sensibility</SenseS>\r\n      </CatContainer> */}\r\n       <form>\r\n        <IContainer><input id=\"add-word\" placeholder=\"add a word :)\" type=\"text\" onChange={handleWord} /></IContainer>\r\n        <BContainer><button type=\"submit\" onClick={addWord}>\r\n          ADD\r\n        </button></BContainer>\r\n      </form>\r\n    <LogContainer>\r\n      {wordz.map(w => (\r\n        <div key={w}>\r\n          <div>\r\n            {w} was added by {votez[w] && votez[w].publisher}\r\n          </div>\r\n          {/* <BContainer><button onClick={() => voteWord(w)}>+</button></BContainer> */}\r\n        </div>\r\n      ))}\r\n</LogContainer>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport WordProvider from \"./Context\";\r\n\r\nReactDOM.render(\r\n  <WordProvider>\r\n    <App />\r\n  </WordProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}